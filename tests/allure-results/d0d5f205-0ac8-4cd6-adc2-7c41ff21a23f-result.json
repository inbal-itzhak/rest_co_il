{"name": "make reservation on restaurant page", "status": "failed", "statusDetails": {"message": "AssertionError: reservation is not in restaurant page - failing the test\nassert False\n +  where False = is_reservation_in_rest_page()\n +    where is_reservation_in_rest_page = <pages.restaurant_page.RestaurantPage object at 0x000001D646606B10>.is_reservation_in_rest_page\n +      where <pages.restaurant_page.RestaurantPage object at 0x000001D646606B10> = <tests.test_rest_page.TestRestPage object at 0x000001D64664C310>.restaurant_page", "trace": "self = <tests.test_rest_page.TestRestPage object at 0x000001D64664C310>, text = 'אגאדיר הרצליה'\n\n    @pytest.mark.parametrize(\"text\", data2)\n    @allure.description(\"when reservation in the restaurant page - make sure reservation completes correctly  \")\n    @allure.title(\"make reservation on restaurant page\")\n    def test_can_make_reservation(self, text):\n        with allure.step(\"open restaurant page\"):\n            self.search_menu.search_partial_text_without_autocomplete_selection(text)\n            self.search_results.wait_for_search_results_page_to_load()\n            self.search_results.click_on_search_result()\n            self.restaurant_page.wait_for_rest_page_to_load()\n            expected_rest_name = self.restaurant_page.get_rest_name()\n            allure.attach(body=f\"{expected_rest_name}\", name=\"expected rest name in test\",\n                          attachment_type=allure.attachment_type.TEXT)\n            # print(f\"expected rest name in test = {expected_rest_name}\")\n        if self.restaurant_page.is_reservation_in_rest_page():\n            with allure.step(\"if reservation is in restaurant page - make reservation\"):\n                expected_reservation_data = self.restaurant_page.make_reservation_in_rest_page()\n                allure.attach(body=f\"{expected_reservation_data}\", name=\"expected_reservation_data\",\n                              attachment_type=allure.attachment_type.TEXT)\n                # print(f\"expected_reservation_data: {expected_reservation_data}\")\n                assert expected_reservation_data is not None, \"all time slots are disabled\"\n                self.confirm_reservation.wait_for_end_res_page_to_load()\n            assert self.confirm_reservation.verify_rest_name(expected_rest_name) == True\n            actual_reservation_data = self.confirm_reservation.get_reservation_data()\n            allure.attach(body=f\"{actual_reservation_data}\", name=\"actual_reservation_data\",\n                          attachment_type=allure.attachment_type.TEXT)\n            # print(f\"actual_reservation_data : {actual_reservation_data}\")\n            assert actual_reservation_data == expected_reservation_data\n        else:\n            with allure.step(\"reservation is not is restaurant page - failing the test\"):\n>               assert self.restaurant_page.is_reservation_in_rest_page(), (\n                    \"reservation is not in restaurant page - failing \"\n                    \"the test\")\nE               AssertionError: reservation is not in restaurant page - failing the test\nE               assert False\nE                +  where False = is_reservation_in_rest_page()\nE                +    where is_reservation_in_rest_page = <pages.restaurant_page.RestaurantPage object at 0x000001D646606B10>.is_reservation_in_rest_page\nE                +      where <pages.restaurant_page.RestaurantPage object at 0x000001D646606B10> = <tests.test_rest_page.TestRestPage object at 0x000001D64664C310>.restaurant_page\n\ntest_rest_page.py:81: AssertionError"}, "description": "when reservation in the restaurant page - make sure reservation completes correctly  ", "steps": [{"name": "open restaurant page", "status": "passed", "steps": [{"name": "search restaurant with partial texts and without selecting from autocomplete, search string:  'אגאדיר הרצליה'", "status": "passed", "attachments": [{"name": "search string", "source": "2a09cca0-faa8-47a6-832f-fc019c287507-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "search_string", "value": "'אגאדיר הרצליה'"}], "start": 1742201886487, "stop": 1742201886649}, {"name": "wait for search results page to load", "status": "passed", "start": 1742201886649, "stop": 1742201888113}, {"name": "click on a search result", "status": "passed", "attachments": [{"name": "number of search results", "source": "3f9274e4-397e-4a0a-81c1-9087cc31a09c-attachment.txt", "type": "text/plain"}], "start": 1742201888113, "stop": 1742201888784}, {"name": "wait for restaurant  page to load", "status": "passed", "start": 1742201888785, "stop": 1742201888821}, {"name": "get restaurant name from restaurant page", "status": "passed", "start": 1742201888821, "stop": 1742201888850}], "attachments": [{"name": "expected rest name in test", "source": "3e289c95-65f7-4bf7-be28-a3645dee62fb-attachment.txt", "type": "text/plain"}], "start": 1742201886486, "stop": 1742201888850}, {"name": "check if reservation is available from restaurant page", "status": "passed", "start": 1742201888851, "stop": 1742201888872}, {"name": "reservation is not is restaurant page - failing the test", "status": "failed", "statusDetails": {"message": "AssertionError: reservation is not in restaurant page - failing the test\nassert False\n +  where False = is_reservation_in_rest_page()\n +    where is_reservation_in_rest_page = <pages.restaurant_page.RestaurantPage object at 0x000001D646606B10>.is_reservation_in_rest_page\n +      where <pages.restaurant_page.RestaurantPage object at 0x000001D646606B10> = <tests.test_rest_page.TestRestPage object at 0x000001D64664C310>.restaurant_page\n", "trace": "  File \"D:\\Dev\\Automatiom_Course\\Python\\rest_co_il\\tests\\test_rest_page.py\", line 81, in test_can_make_reservation\n    assert self.restaurant_page.is_reservation_in_rest_page(), (\n"}, "steps": [{"name": "check if reservation is available from restaurant page", "status": "passed", "start": 1742201888872, "stop": 1742201888889}], "start": 1742201888872, "stop": 1742201888889}], "attachments": [{"name": "stdout", "source": "1c9a90d0-67ca-438e-8164-318b4b869df6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "text", "value": "'אגאדיר הרצליה'"}], "start": 1742201886486, "stop": 1742201888890, "uuid": "32147086-0ccf-4a56-8308-2879a8c60abe", "historyId": "761a627ae4cb408866567c0f164907e0", "testCaseId": "365a5b12ec47621f79c176065da69f52", "fullName": "test_rest_page.TestRestPage#test_can_make_reservation", "labels": [{"name": "suite", "value": "test_rest_page"}, {"name": "subSuite", "value": "TestRestPage"}, {"name": "host", "value": "DESKTOP-3OBST43"}, {"name": "thread", "value": "76288-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_rest_page"}]}